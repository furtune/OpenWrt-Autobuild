From 4b7e0c45af8a67fbaa2b8d667cc1bacfab7b0605 Mon Sep 17 00:00:00 2001
From: Register <458892+aieu@users.noreply.github.com>
Date: Tue, 22 Dec 2020 15:30:35 +0800
Subject: [PATCH] add sfe switch

Signed-off-by: Register <458892+aieu@users.noreply.github.com>
---
 .../resources/view/firewall/zones.js          | 67 ++++++++++++++++++-
 1 file changed, 66 insertions(+), 1 deletion(-)

diff --git a/applications/luci-app-firewall/htdocs/luci-static/resources/view/firewall/zones.js b/applications/luci-app-firewall/htdocs/luci-static/resources/view/firewall/zones.js
index b2f9b81a9..f8c67d6be 100644
--- a/applications/luci-app-firewall/htdocs/luci-static/resources/view/firewall/zones.js
+++ b/applications/luci-app-firewall/htdocs/luci-static/resources/view/firewall/zones.js
@@ -8,6 +8,59 @@
 'require tools.firewall as fwtool';
 'require tools.widgets as widgets';
 
+var callInitList, callInitAction, sfe;
+
+callInitList = rpc.declare({
+		object: 'luci',
+		method: 'getInitList',
+		params: ['name'],
+		expect: {
+				'': {}
+				},
+		filter: function (res) {
+				for (var k in res)
+						return +res[k].enabled;
+				return null;
+		}
+});
+callInitAction = rpc.declare({
+		object: 'luci',
+		method: 'setInitAction',
+		params: ['name', 'action'],
+		expect: {
+				result: false
+		}
+});
+sfe = form.DummyValue.extend({
+		renderWidget: function (section_id, option_id, cfgvalue) {
+				return E([], [this.sfe_support ? E('button', {
+						'class': 'cbi-button cbi-button-save',
+						'click': function () {
+								this.disabled = true;
+								this.blur();
+								this.classList.add('spinning');
+								callInitAction('shortcut-fe', 'stop');
+								callInitAction('shortcut-fe', 'disable').then(L.bind(function () {
+										this.classList.remove('spinning');
+										location.reload();
+								}, this));
+						}
+				}, _('Enabled')) : E('button', {
+						'class': 'cbi-button cbi-button-reset',
+						'click': function () {
+								this.disabled = true;
+								this.blur();
+								this.classList.add('spinning');
+								callInitAction('shortcut-fe', 'start');
+								callInitAction('shortcut-fe', 'enable').then(L.bind(function () {
+										this.classList.remove('spinning');
+										location.reload();
+								}, this));
+						}
+				}, _('Disabled'))]);
+		},
+});
+
 return view.extend({
 	callConntrackHelpers: rpc.declare({
 		object: 'luci',
@@ -18,7 +71,8 @@ return view.extend({
 	load: function() {
 		return Promise.all([
 			this.callConntrackHelpers(),
-			firewall.getDefaults()
+			firewall.getDefaults(),
+			callInitList('shortcut-fe')
 		]);
 	},
 
@@ -32,6 +86,7 @@ return view.extend({
 	renderZones: function(data) {
 		var ctHelpers = data[0],
 		    fwDefaults = data[1],
+						sfe_support = data[2],
 		    m, s, o, inp, out;
 
 		m = new form.Map('firewall', _('Firewall - Zone Settings'),
@@ -71,6 +126,16 @@ return view.extend({
 
 		/* Netfilter flow offload support */
 
+		s = m.section(form.TypedSection, 'defaults', _('Routing/NAT Offloading'), _('Experimental feature. Not fully compatible with QoS/SQM.'));
+		s.anonymous = true;
+		s.addremove = false;
+		o = s.option(sfe, _('SFE flow offloading'),
+			_('SFE flow offloading'), _('SFE based offloading for Routing/NAT. Restart recommended.'));
+		o.sfe_support = sfe_support;
+		o.load = function (section_id) {
+				return (uci.get('system', 'shortcut-fe', 'enabled') != 0) ? '1' : '0';
+		};
+
 		if (L.hasSystemFeature('offloading')) {
 			s = m.section(form.TypedSection, 'defaults', _('Routing/NAT Offloading'),
 				_('Experimental feature. Not fully compatible with QoS/SQM.'));
-- 
2.24.3 (Apple Git-128)

